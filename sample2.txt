from pulp import LpProblem, LpMaximize, LpMinimize, LpVariable, lpSum, LpStatus, LpInteger
import pandas as pd
import numpy as np

# parameters
#df_volume = pd.read_csv('data_volume.csv', index_col=0)
#df_limits = pd.read_csv('data_limits.csv', index_col=0)
#df_needs  = pd.read_csv('data_needs.csv', index_col=0)
df_volume = pd.read_csv('tmp_tmp_data_volume.csv', index_col=0)
df_limits = pd.read_csv('tmp_tmp_data_limits.csv', index_col=0)
df_needs  = pd.read_csv('tmp_tmp_data_needs.csv', index_col=0)

df_vol = 1/df_volume.replace(0, 0.0001)
#df_vol['U3'] = df_vol['U3'].replace(list(df_vol['U3'].values), 10000)
#print(df_vol)

units = list(df_vol.columns.values)
prods = list(df_vol.index.values)

volume = df_volume.values
#print(volume)

new_volume=[]
index_volume=[]
row_volume=[]
col_volume=[]
for j in range(len(volume)):
    for i in range(len(volume[j])):
        if volume[j][i]!=0:
           new_volume.append(volume[j][i])
           index_volume.append(j*len(volume[j])+i)
           row_volume.append(j)
           col_volume.append(i)

new_vol=[]
for value in new_volume:
    new_vol.append(1/value)

#print(new_volume)
#print(index_volume)
#print(row_volume)
#print(col_volume)
#print(new_vol)

del volume, df_volume

# variables
#produce = LpVariable.dicts('produce', (units, prods), 0, max(df_needs['needs']), 'Integer')
produce = LpVariable.dicts('produce', index_volume, 0, max(df_needs['needs']), 'Integer')
#produce = np.array(LpVariable(name=f'produce{i}', lowBound=0, upBound=max(df_needs['needs']), cat=LpInteger) for i in range(new_vol))
#produce = np.array(LpVariable(f'produce{i}', 0, max(df_needs['needs']), LpInteger) for i in range(new_vol))

# objective function
total_time = lpSum(produce[index_volume[i]] * new_vol[i] for i in range(len(new_vol)))

# model and objectives
model = LpProblem("Manufacture", LpMinimize)
model += total_time

# constraints
## sum of production
#for nprod in prods:
#    total_prod_amount = lpSum(produce[unit][nprod] for unit in units)
#    model += total_prod_amount == df_needs['needs'][nprod]
for nprod in range(len(prods)):
    tmp=[]
    for nrow in range(len(row_volume)):
        if row_volume[nrow]==nprod:
            tmp.append(produce[nprod*len(units)+col_volume[nrow]])
    total_prod_amount = lpSum(tmp)
    model += total_prod_amount == df_needs['needs'][prods[nprod]]

## upper limits
#for unit in units:
#    total_time_each_unit = lpSum(produce[unit][nprod] * df_vol[unit][nprod] for nprod in prods)
#    model += total_time_each_unit <= df_limits[unit]['limits']
for unit in range(len(units)):
    tmp=[]
    for ncol in range(len(col_volume)):
        if col_volume[ncol]==unit:
            tmp.append(produce[row_volume[ncol]*len(units)+unit] * df_vol[units[unit]][prods[row_volume[ncol]]])
    total_time_each_unit = lpSum(tmp)
    model += total_time_each_unit <= df_limits[units[unit]]['limits']

print(model)
input()

status = model.solve()

print("Status:", LpStatus[status])
print(model.objective.value())

print('Result:')

#print(produce)

produce_value = np.zeros([len(prods), len(units)])
produce_value_tmp = [produce[index_volume[i]].value() for i in range(len(new_vol))]
for i in range(len(index_volume)):
    produce_value[row_volume[i]][col_volume[i]] = produce_value_tmp[i]

df_prod = pd.DataFrame(produce_value, index=prods, columns=units)
df_prod.to_csv('tmp_tmp_result_produce.csv')
print(df_prod)

#print(produce_value)
#print(df_vol)

produce_time = np.multiply(produce_value, df_vol)
df_time = pd.DataFrame(produce_time, index=prods, columns=units)
df_time.to_csv('tmp_tmp_result_produce_time.csv')
print(df_time)

print('Number of Production')
print(df_prod.sum(axis=1))

print('Production Time')
print(df_time.sum(axis=0))

exit()

